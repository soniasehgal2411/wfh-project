{"version":3,"sources":["components/layout/Navbar.js","components/users/UserItem.js","components/layout/FormPage.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Fragment","style","textAlign","className","this","props","topic","to","type","Component","UserItem","state","name","id","domain","FormPage","placeholder","maxLength","onClick","event","submitData","App","path","exact","strict","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAwBeA,E,uKAlBP,OACI,kBAAC,IAAMC,SAAP,KACI,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,0BAEA,yBAAKC,UAAU,kBAGX,4BAAKC,KAAKC,MAAMC,MAAhB,mBACA,kBAAC,IAAD,CAAMC,GAAG,aACT,4BAAQJ,UAAU,oBAAoBK,KAAK,UAA3C,YAGJ,2BAAG,gF,GAfEC,aCsBNC,E,kDAtBX,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IAEDM,MAAQ,CACTC,KAAM,QACNC,GAAI,SACJC,OAAQ,YANG,E,qDAWf,OACI,kBAAC,IAAMd,SAAP,KACI,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,0BACA,8CAAoBE,KAAKO,MAAMC,MAC/B,wCAAcR,KAAKO,MAAME,IACzB,4CAAkBT,KAAKO,MAAMG,a,GAjBtBL,aCsCRM,G,6KAjCD,IAAD,OACL,OACE,yBAAKZ,UAAU,mBACb,8BACE,yBAAKA,UAAU,aACb,4BAAI,iDACJ,4EAEA,+BAAO,oCACP,2BAAOK,KAAK,OAAOI,KAAK,OAAOI,YAAY,4BAE3C,+BAAO,yCACP,2BAAOR,KAAK,OAAOI,KAAK,SAASI,YAAY,0BAA0BC,UAAU,OAEjF,+BAAO,yCACP,2BAAOT,KAAK,OAAOI,KAAK,UAAUI,YAAY,4BAE9C,+BAAO,wCACP,2BAAOR,KAAK,WAAWI,KAAK,WAAWI,YAAY,2BAEnD,uFACA,6BACA,4BAAQR,KAAK,SAASL,UAAU,cAAce,QAAS,SAACC,GAAD,OAAW,EAAKC,WAAWD,KAAlF,IAA2F,sCAC3F,yBAAKhB,UAAU,UACb,sDAA2B,kBAAC,IAAD,CAAMI,GAAG,WAAT,oB,GAzBtBE,c,OCyBRY,E,uKAlBX,OACE,kBAAC,IAAD,KACU,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,YAAYC,OAAK,EAACC,QAAM,EAACC,UAAWV,KAE9D,kBAAC,IAAMf,SAAP,KACE,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,0CACA,qCAVS,gBAW+B,4BAX/B,eAW+B,wBACxC,kBAAC,EAAD,CAAQI,MAAM,mBACd,kBAAC,EAAD,Y,GAfUG,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c655187d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Navbar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1 style={{ textAlign: \"center\" }}> \r\n                This is navbar section</h1>\r\n                <nav className=\"navbar bg-dark\">\r\n                    {/* passing props */}\r\n                    \r\n                    <h2>{this.props.topic} Navbar Heading</h2>\r\n                    <Link to=\"/FormPage\">\r\n                    <button className=\"btn btn-secondary\" type=\"submit\">SUBMIT</button>\r\n                    </Link>\r\n                </nav>\r\n                <p><b>Click on submit button to view user details</b></p>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React, { Component } from 'react'\r\n\r\nclass UserItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // initialising state\r\n        this.state = {\r\n            name: 'Sonia',\r\n            id: '123456',\r\n            domain: 'React-JS',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1 style={{ textAlign: \"center\" }}>This is User Info Page</h1>\r\n                <h3>Hi, my name is {this.state.name}</h3>\r\n                <h3>My id is {this.state.id}</h3>\r\n                <h3>My domain is {this.state.domain}</h3>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserItem","import React from 'react';\r\nimport { Component } from 'react';\r\nimport {Link } from 'react-router-dom';\r\nimport './../css/Navbar.css';\r\n\r\n\r\nclass FormPage extends Component{\r\n    render() {\r\n        return (\r\n          <div className=\"registerfullbox\">\r\n            <form>\r\n              <div className=\"container\">\r\n                <h2><b>REGISTER YOURSELF</b></h2>\r\n                <p>Please fill in this form to create an account</p>\r\n    \r\n                <label><b>NAME</b></label>\r\n                <input type=\"text\" name=\"name\" placeholder=\"Enter your full name...\"/>\r\n    \r\n                <label><b>MOBILE NO</b></label>\r\n                <input type=\"text\" name=\"mobile\" placeholder=\"Enter Your Mobile No...\" maxLength=\"10\" />\r\n    \r\n                <label><b>E-MAIL ID</b></label>\r\n                <input type=\"text\" name=\"mail-id\" placeholder=\"Enter your e-mail id...\"/>\r\n    \r\n                <label><b>PASSWORD</b></label>\r\n                <input type=\"password\" name=\"password\" placeholder=\"Enter your password...\"/>\r\n    \r\n                <p>By creating an account you agree to our Terms & Privacy.</p>\r\n                <hr />\r\n                <button type=\"submit\" className=\"registerbtn\" onClick={(event) => this.submitData(event)}> <b>SUBMIT</b></button>\r\n                <div className=\"signin\">\r\n                  <p>Already have an account?<Link to=\"/SignIn\">Sign in</Link></p>\r\n                </div>\r\n              </div >\r\n            </form>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\nexport default FormPage;","import React, { Component } from 'react';\n// import Router from 'react-router';\nimport './App.css';\nimport Navbar from './components/layout/Navbar';\nimport UserItem from './components/users/UserItem';\nimport FormPage from './components/layout/FormPage';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    const name = 'Sonia Sehgal';\n    const status = false;\n\n    return (\n      <Router>\n                <Switch>\n                    <Route path=\"/FormPage\" exact strict component={FormPage} />\n                </Switch>\n      <React.Fragment>\n        <h1 style={{ textAlign: \"center\" }}>This section is the basic use of props</h1>\n        <h2>Hello {name}</h2>\n        {status ? <h3>Status verified...</h3> : <h4>{name} status not verified</h4>}\n        <Navbar topic=\"Github Project\" />\n        <UserItem />\n      </React.Fragment>\n      </Router>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}